{
    "Day 19": {
      "Topic": "Generators and Iterators",
      "Explanation": "Generators and iterators are used in Python to handle sequences of data. An iterator is an object that can be iterated upon, meaning you can traverse through all the values. A generator is a special type of iterator that is defined using a function and yields values one at a time, allowing you to iterate through potentially large data sets without storing them in memory.",
      "Examples": {
        "Iterators": {
          "Code": "my_list = [1, 2, 3]\nmy_iterator = iter(my_list)\nprint(next(my_iterator))  # Outputs: 1\nprint(next(my_iterator))  # Outputs: 2\nprint(next(my_iterator))  # Outputs: 3",
          "Description": "This example shows how to create an iterator from a list and use the `next()` function to retrieve elements one at a time."
        },
        "Creating a Generator": {
          "Code": "def my_generator():\n    yield 1\n    yield 2\n    yield 3\n\ngen = my_generator()\nprint(next(gen))  # Outputs: 1\nprint(next(gen))  # Outputs: 2\nprint(next(gen))  # Outputs: 3",
          "Description": "This example shows how to define a simple generator function using the `yield` keyword."
        },
        "Generator Expression": {
          "Code": "gen = (x**2 for x in range(3))\nprint(next(gen))  # Outputs: 0\nprint(next(gen))  # Outputs: 1\nprint(next(gen))  # Outputs: 4",
          "Description": "This example shows how to create a generator expression to generate squares of numbers on the fly."
        },
        "Using Generators in a Loop": {
          "Code": "def my_generator():\n    yield 1\n    yield 2\n    yield 3\n\nfor value in my_generator():\n    print(value)",
          "Description": "This example shows how to iterate through all values produced by a generator using a `for` loop."
        }
      },
      "Built-in Functions": {
        "iter()": {
          "Description": "The `iter()` function returns an iterator object from an iterable.",
          "Example": "my_list = [1, 2, 3]\nmy_iterator = iter(my_list)"
        },
        "next()": {
          "Description": "The `next()` function retrieves the next item from an iterator. If the iterator is exhausted, it raises a `StopIteration` exception.",
          "Example": "my_list = [1, 2, 3]\nmy_iterator = iter(my_list)\nprint(next(my_iterator))"
        }
      },
      "Exercise": {
        "Task": "Write a Python script that defines a generator function to generate the first `n` Fibonacci numbers. Use this generator to print the first 10 Fibonacci numbers.",
        "Hint": "Define the generator function with a loop that calculates Fibonacci numbers using the `yield` keyword. In the main part of the script, call the generator and iterate through its values to print the numbers."
      }
    }
  }
  